/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>
*/

#define PRIMARY_COMBO_REQUIRE_IDLE_TIMEOUT 30 // default: -1
#define PRIMARY_COMBO_TIMEOUT_MS 40 // default: 50

// modifications to builtins

&gresc {
    keep-mods = <(MOD_LSFT|MOD_RSFT)>;
    mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
};

&sl { ignore-modifiers; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_gresc {
            key-positions = <1 2>; // above resting left pinky and ring finger
            bindings = <&gresc>;
            require-prior-idle-ms = <PRIMARY_COMBO_REQUIRE_IDLE_TIMEOUT>;
            timeout-ms = <PRIMARY_COMBO_TIMEOUT_MS>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <16 21>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0>;
        };

        combo_sticky_func_layer {
            bindings = <&sl 3>;
            key-positions = <31 32 33>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <14 19>;
        };

        combo_toggle_matmov {
            bindings = <&tog 1>;
            key-positions = <30 39>;
            layers = <0 1>;
        };

        combo_equals {
            bindings = <&kp EQUAL>;
            key-positions = <8 7>;
            timeout-ms = <PRIMARY_COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <PRIMARY_COMBO_REQUIRE_IDLE_TIMEOUT>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <9 8>;
            timeout-ms = <PRIMARY_COMBO_TIMEOUT_MS>;
            require-prior-idle-ms = <PRIMARY_COMBO_REQUIRE_IDLE_TIMEOUT>;
        };

        vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <5 17>;
            layers = <0>;
        };

        vol_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <17 29>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the left side of the keyboard

            hold-while-undecided;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the right side of the keyboard

            hold-while-undecided;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        nh_hml: no_hold_while_undecided_hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            hold-trigger-on-release;
        };

        nh_hmr: no_hold_while_undecided_hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "bspc but del when shifted";
        };

        under_space: under_space {
            compatible = "zmk,behavior-mod-morph";
            label = "space but _ when shifted";
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        Sta_LT: mm_star_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "* <";
            bindings = <&kp ASTERISK>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hp_lt: hold_preferred_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREF_LAYER_TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DFLT {
            bindings = <
&none  &kp Q           &kp W         &kp E          &kp R        &kp T              &kp Y  &kp U         &kp I          &kp O         &kp P                   &none
&none  &nh_hml LALT A  &hml LCTRL S  &hml LSHIFT D  &hml LGUI F  &kp G              &kp H  &hmr LGUI J   &hmr LSHIFT K  &hmr LCTRL L  &nh_hmr LALT SEMICOLON  &none
&none  &kp Z           &kp X         &kp C          &kp V        &kp B              &kp N  &kp M         &kp COMMA      &kp DOT       &kp FSLH                &none
                                     &none          &none        &hp_lt 2 RETURN    &sl 1  &under_space  &none
            >;
        };

        MATH {
            bindings = <
&trans  &kp LEFT_BRACE    &kp N5  &kp N6  &kp N7  &kp RIGHT_BRACE      &none     &kp AMPERSAND         &kp ASTERISK                  &kp MINUS                &kp PIPE  &trans
&trans  &kp LEFT_BRACKET  &kp N9  &kp N0  &kp N1  &kp RIGHT_BRACKET    &none     &hmr LGUI LEFT_BRACE  &hmr LSHIFT LEFT_PARENTHESIS  &hmr LCTRL LEFT_BRACKET  &kp LALT  &trans
&trans  &kp SINGLE_QUOTE  &kp N2  &kp N3  &kp N4  &kp BACKSLASH        &kp BSLH  &none                 &trans                        &trans                   &trans    &trans
                                  &trans  &kp N8  &trans               &trans    &trans                &trans
            >;
        };

        NAV {
            bindings = <
&trans  &none     &none      &none       &none     &none     &kp TAB   &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &none    &trans
&trans  &kp LALT  &kp LCTRL  &kp LSHIFT  &kp LGUI  &none     &kp HOME  &kp LEFT     &kp DOWN  &kp RIGHT      &kp END  &trans
&trans  &none     &none      &none       &none     &none     &none     &none        &none     &none          &none    &trans
                             &trans      &trans    &trans    &trans    &trans       &trans
            >;
        };

        FUNC {
            bindings = <
&none  &bootloader      &kp F5         &kp F6      &kp F7        &kp F10    &none   &none     &kp INSERT  &none      &bootloader  &none
&none  &nh_hml LALT F8  &hml LCTRL F9  &kp LSHIFT  &hml LGUI F1  &kp F11    &none   &kp LGUI  &kp LSHIFT  &kp LCTRL  &kp LALT     &none
&none  &kp C_SLEEP      &kp F2         &kp F3      &kp F4        &kp F12    &none   &none     &none       &none      &none        &none
                                       &trans      &trans        &trans     &trans  &trans    &trans
            >;
        };
    };
};
