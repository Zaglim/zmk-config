/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>
*/
// Layer defines

#define BASE 0
#define MATH 1
#define NAVI 2
#define FUNC 3

/ {
    combos {
        compatible = "zmk,combos";

        combo_ESC {
            timeout-ms = <50>;
            key-positions = <1 2>; // above resting left pinky and ring finger
            bindings = <&kp ESC>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <16 17>;
            require-prior-idle-ms = <30>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0>;
        };

        combo_sticky_func_layer {
            bindings = <&sl 3>;
            key-positions = <31 32 33>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the left side of the keyboard

            hold-while-undecided;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the right side of the keyboard

            hold-while-undecided;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "bspc but del when shifted";
        };

        under_space: under_space {
            compatible = "zmk,behavior-mod-morph";
            label = "space but _ when shifted";
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        Sta_LT: mm_star_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "* <";
            bindings = <&kp ASTERISK>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB        &kp Q  &kp W         &kp E         &kp R            &kp T        &kp Y  &kp U            &kp I          &kp O         &kp P          &kp BACKSLASH
&kp BACKSPACE  &kp A  &hml LCTRL S  &hml LSHFT D  &hml LEFT_GUI F  &kp G        &kp H  &hmr LEFT_GUI J  &hmr LSHIFT K  &hmr LCTRL L  &kp SEMICOLON  &kp SINGLE_QUOTE
&none          &kp Z  &kp X         &kp C         &kp V            &kp B        &kp N  &kp M            &kp COMMA      &kp DOT       &kp FSLH       &none
                                    &kp LALT      &sl 1            &kp ENTER    &mo 2  &under_space     &kp RALT
            >;
        };

        math_layer {
            bindings = <
&trans  &kp N1  &kp N2     &kp N3      &kp N4               &kp N5    &kp N6     &kp N7          &kp N8            &kp N9                    &kp N0  &kp PIPE
&trans  &none   &kp LCTRL  &kp LSHIFT  &hml LEFT_GUI MINUS  &none     &none      &hmr LGUI PLUS  &kp LEFT_BRACKET  &hmr LCTRL RIGHT_BRACKET  &trans  &trans
&trans  &none   &none      &none       &none                &none     &kp CARET  &kp AMPERSAND   &Sta_LT           &trans                    &trans  &none
                           &trans      &trans               &trans    &trans     &trans          &trans
            >;

            label = "Math";
        };

        navigation_layer {
            bindings = <
&trans  &none         &none         &none       &none        &none        &none     &kp PAGE_UP  &kp UP    &kp PAGE_DOWN  &none    &trans
&trans  &trans        &trans        &trans      &trans       &kp C_PIP    &kp HOME  &kp LEFT     &kp DOWN  &kp RIGHT      &kp END  &none
&trans  &kp C_VOL_DN  &kp C_VOL_UP  &kp K_COPY  &kp K_PASTE  &kp INS      &none     &none        &none     &none          &none    &none
                                    &trans      &trans       &trans       &trans    &trans       &trans
            >;

            label = "NAV";
        };

        function_layer {
            bindings = <
&none  &kp F1   &kp F2       &kp F3          &kp F4  &kp F5         &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &none
&none  &kp F11  &kp F12      &studio_unlock  &none   &sys_reset     &none   &none   &none   &none   &none    &none
&none  &none    &kp C_SLEEP  &none           &none   &bootloader    &none   &none   &none   &none   &none    &none
                             &none           &none   &none          &none   &none   &none
            >;
        };

        /*

        lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                >;
        };

        raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                >;
        };


        */
    };
};
