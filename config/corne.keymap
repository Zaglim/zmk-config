/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/*
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <dt-bindings/zmk/pointing.h>
*/
// Layer defines

#define BASE 0
#define MATH 1
#define NAVI 2
#define FUNC 3

/ {
    combos {
        compatible = "zmk,combos";

        combo_gresc {
            timeout-ms = <50>;
            key-positions = <1 2>; // above resting left pinky and ring finger
            bindings = <&gresc>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <16 17>;
            require-prior-idle-ms = <30>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <15 20>;
            layers = <0>;
        };

        combo_sticky_func_layer {
            bindings = <&sl 2>;
            key-positions = <31 32 33>;
        };

        combo_bspc {
            bindings = <&kp BSPC>;
            key-positions = <26 27>;
        };

        combo_quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <9 8>;
        };

        como_toggle_matmov {
            bindings = <&tog 1>;
            key-positions = <30 31 32>;
        };

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <4 3>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <7 6>;
        };

        combo_equals {
            bindings = <&kp EQUAL>;
            key-positions = <8 7>;
        };
    };

    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the left side of the keyboard

            hold-while-undecided;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            // List of keys on the right side of the keyboard

            hold-while-undecided;
        };

        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "bspc but del when shifted";
        };

        under_space: under_space {
            compatible = "zmk,behavior-mod-morph";
            label = "space but _ when shifted";
            bindings = <&kp SPACE>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        Sta_LT: mm_star_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "* <";
            bindings = <&kp ASTERISK>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        nh_hml: no_hold_undecided_hml {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            label = "NH_HML";
        };

        nh_hmr: no_hold_undecided_hmr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <140>;
            bindings = <&kp>, <&kp>;

            label = "NH_HMR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DFLT {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB  &kp Q           &kp W         &kp E          &kp R        &kp T        &kp Y  &kp U         &kp I          &kp O         &kp P                   &none
&none    &nh_hml LALT A  &hml LCTRL S  &hml LSHIFT D  &hml LGUI F  &kp G        &kp H  &hmr LGUI J   &hmr LSHIFT K  &hmr LCTRL L  &nh_hmr LALT SEMICOLON  &none
&none    &kp Z           &kp X         &kp C          &kp V        &kp B        &kp N  &kp M         &kp COMMA      &kp DOT       &kp FSLH                &none
                                       &none          &none        &kp ENTER    &sl 1  &under_space  &none
            >;
        };

        MATNAV {
            bindings = <
&trans  &kp LEFT_BRACKET  &kp N5         &kp N6          &kp N7        &kp RIGHT_BRACKET    &kp HOME  &kp PAGE_UP     &kp UP            &kp PAGE_DOWN     &kp END  &trans
&trans  &nh_hml LALT N8   &hml LCTRL N9  &hml LSHIFT N0  &hml LGUI N1  &kp EQUAL            &none     &hmr LGUI LEFT  &hmr LSHIFT DOWN  &hmr LCTRL RIGHT  &trans   &trans
&trans  &none             &kp N2         &kp N3          &kp N4        &kp BACKSLASH        &none     &none           &trans            &trans            &trans   &trans
                                         &trans          &trans        &trans               &trans    &trans          &trans
            >;
        };

        FUNC {
            bindings = <
&none  &kp F1   &kp F2       &kp F3          &kp F4  &kp F5         &kp F6  &kp F7  &kp F8      &kp F9  &kp F10  &none
&none  &kp F11  &kp F12      &studio_unlock  &none   &sys_reset     &none   &none   &kp INSERT  &none   &none    &none
&none  &none    &kp C_SLEEP  &none           &none   &bootloader    &none   &none   &none       &none   &none    &none
                             &trans          &trans  &trans         &trans  &trans  &trans
            >;
        };

        /*

        lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
   &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                    &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT
                >;
        };

        raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
            bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                >;
        };


        */
    };
};
